// Generated by gencpp from file serial_itri_driver/command_key.msg
// DO NOT EDIT!


#ifndef SERIAL_ITRI_DRIVER_MESSAGE_COMMAND_KEY_H
#define SERIAL_ITRI_DRIVER_MESSAGE_COMMAND_KEY_H

#include <ros/service_traits.h>


#include <serial_itri_driver/command_keyRequest.h>
#include <serial_itri_driver/command_keyResponse.h>


namespace serial_itri_driver
{

struct command_key
{

typedef command_keyRequest Request;
typedef command_keyResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct command_key
} // namespace serial_itri_driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::serial_itri_driver::command_key > {
  static const char* value()
  {
    return "599c74f7b589131c348db47ed14be887";
  }

  static const char* value(const ::serial_itri_driver::command_key&) { return value(); }
};

template<>
struct DataType< ::serial_itri_driver::command_key > {
  static const char* value()
  {
    return "serial_itri_driver/command_key";
  }

  static const char* value(const ::serial_itri_driver::command_key&) { return value(); }
};


// service_traits::MD5Sum< ::serial_itri_driver::command_keyRequest> should match
// service_traits::MD5Sum< ::serial_itri_driver::command_key >
template<>
struct MD5Sum< ::serial_itri_driver::command_keyRequest>
{
  static const char* value()
  {
    return MD5Sum< ::serial_itri_driver::command_key >::value();
  }
  static const char* value(const ::serial_itri_driver::command_keyRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::serial_itri_driver::command_keyRequest> should match
// service_traits::DataType< ::serial_itri_driver::command_key >
template<>
struct DataType< ::serial_itri_driver::command_keyRequest>
{
  static const char* value()
  {
    return DataType< ::serial_itri_driver::command_key >::value();
  }
  static const char* value(const ::serial_itri_driver::command_keyRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::serial_itri_driver::command_keyResponse> should match
// service_traits::MD5Sum< ::serial_itri_driver::command_key >
template<>
struct MD5Sum< ::serial_itri_driver::command_keyResponse>
{
  static const char* value()
  {
    return MD5Sum< ::serial_itri_driver::command_key >::value();
  }
  static const char* value(const ::serial_itri_driver::command_keyResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::serial_itri_driver::command_keyResponse> should match
// service_traits::DataType< ::serial_itri_driver::command_key >
template<>
struct DataType< ::serial_itri_driver::command_keyResponse>
{
  static const char* value()
  {
    return DataType< ::serial_itri_driver::command_key >::value();
  }
  static const char* value(const ::serial_itri_driver::command_keyResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // SERIAL_ITRI_DRIVER_MESSAGE_COMMAND_KEY_H
