// Generated by gencpp from file navigation_controller/command_statusRequest.msg
// DO NOT EDIT!


#ifndef NAVIGATION_CONTROLLER_MESSAGE_COMMAND_STATUSREQUEST_H
#define NAVIGATION_CONTROLLER_MESSAGE_COMMAND_STATUSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation_controller
{
template <class ContainerAllocator>
struct command_statusRequest_
{
  typedef command_statusRequest_<ContainerAllocator> Type;

  command_statusRequest_()
    : get_status(false)
    , is_cancel(false)
    , is_charging(false)  {
    }
  command_statusRequest_(const ContainerAllocator& _alloc)
    : get_status(false)
    , is_cancel(false)
    , is_charging(false)  {
  (void)_alloc;
    }



   typedef uint8_t _get_status_type;
  _get_status_type get_status;

   typedef uint8_t _is_cancel_type;
  _is_cancel_type is_cancel;

   typedef uint8_t _is_charging_type;
  _is_charging_type is_charging;





  typedef boost::shared_ptr< ::navigation_controller::command_statusRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation_controller::command_statusRequest_<ContainerAllocator> const> ConstPtr;

}; // struct command_statusRequest_

typedef ::navigation_controller::command_statusRequest_<std::allocator<void> > command_statusRequest;

typedef boost::shared_ptr< ::navigation_controller::command_statusRequest > command_statusRequestPtr;
typedef boost::shared_ptr< ::navigation_controller::command_statusRequest const> command_statusRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation_controller::command_statusRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation_controller::command_statusRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::navigation_controller::command_statusRequest_<ContainerAllocator1> & lhs, const ::navigation_controller::command_statusRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get_status == rhs.get_status &&
    lhs.is_cancel == rhs.is_cancel &&
    lhs.is_charging == rhs.is_charging;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::navigation_controller::command_statusRequest_<ContainerAllocator1> & lhs, const ::navigation_controller::command_statusRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace navigation_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation_controller::command_statusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation_controller::command_statusRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation_controller::command_statusRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d18fcf9db4fe2d25e7db577dfd268f53";
  }

  static const char* value(const ::navigation_controller::command_statusRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd18fcf9db4fe2d25ULL;
  static const uint64_t static_value2 = 0xe7db577dfd268f53ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation_controller/command_statusRequest";
  }

  static const char* value(const ::navigation_controller::command_statusRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool get_status\n"
"bool is_cancel\n"
"bool is_charging\n"
;
  }

  static const char* value(const ::navigation_controller::command_statusRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get_status);
      stream.next(m.is_cancel);
      stream.next(m.is_charging);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct command_statusRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation_controller::command_statusRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation_controller::command_statusRequest_<ContainerAllocator>& v)
  {
    s << indent << "get_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get_status);
    s << indent << "is_cancel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_cancel);
    s << indent << "is_charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charging);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_CONTROLLER_MESSAGE_COMMAND_STATUSREQUEST_H
