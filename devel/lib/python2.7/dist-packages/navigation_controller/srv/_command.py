# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation_controller/commandRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class commandRequest(genpy.Message):
  _md5sum = "217ff03a15c0dbc7085b075d48d57395"
  _type = "navigation_controller/commandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 type
float64 x
float64 y
float64 theta
bool is_nav
"""
  __slots__ = ['type','x','y','theta','is_nav']
  _slot_types = ['int64','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,x,y,theta,is_nav

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(commandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.is_nav is None:
        self.is_nav = False
    else:
      self.type = 0
      self.x = 0.
      self.y = 0.
      self.theta = 0.
      self.is_nav = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q3dB().pack(_x.type, _x.x, _x.y, _x.theta, _x.is_nav))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.type, _x.x, _x.y, _x.theta, _x.is_nav,) = _get_struct_q3dB().unpack(str[start:end])
      self.is_nav = bool(self.is_nav)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q3dB().pack(_x.type, _x.x, _x.y, _x.theta, _x.is_nav))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.type, _x.x, _x.y, _x.theta, _x.is_nav,) = _get_struct_q3dB().unpack(str[start:end])
      self.is_nav = bool(self.is_nav)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q3dB = None
def _get_struct_q3dB():
    global _struct_q3dB
    if _struct_q3dB is None:
        _struct_q3dB = struct.Struct("<q3dB")
    return _struct_q3dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from navigation_controller/commandResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class commandResponse(genpy.Message):
  _md5sum = "372d569423bff8e1e22d8bef0a19c178"
  _type = "navigation_controller/commandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool is_running
bool run_completed


"""
  __slots__ = ['is_running','run_completed']
  _slot_types = ['bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_running,run_completed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(commandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.is_running is None:
        self.is_running = False
      if self.run_completed is None:
        self.run_completed = False
    else:
      self.is_running = False
      self.run_completed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_running, _x.run_completed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.is_running, _x.run_completed,) = _get_struct_2B().unpack(str[start:end])
      self.is_running = bool(self.is_running)
      self.run_completed = bool(self.run_completed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_running, _x.run_completed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.is_running, _x.run_completed,) = _get_struct_2B().unpack(str[start:end])
      self.is_running = bool(self.is_running)
      self.run_completed = bool(self.run_completed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class command(object):
  _type          = 'navigation_controller/command'
  _md5sum = 'f75d6c7ceee1c8023f1b356191a18d49'
  _request_class  = commandRequest
  _response_class = commandResponse
